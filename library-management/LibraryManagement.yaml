openapi: 3.0.0
info:
  title: Library Management API
  description: API for managing books and authors in a library.
  version: 1.1.0
servers:
- url: https://virtserver.swaggerhub.com/HEIFREDDY2/oas-td1-std23097/1.1.0
  description: SwaggerHub API Auto Mocking
paths:
  /books:
    get:
      summary: Get a list of books
      operationId: getAllBooks
      parameters:
      - name: bookName
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: releaseDate
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date
          example: 2020-01-01
      - name: page
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: number
          example: 1
      - name: pageSize
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: number
          example: 50
      responses:
        "200":
          description: A list of books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
    put:
      summary: Update an existing book
      operationId: updateBook
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CrupdateBook'
        required: true
      responses:
        "200":
          description: Book updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
    post:
      summary: Create a new book
      operationId: createBook
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CrupdateBook'
        required: true
      responses:
        "201":
          description: Book created
    delete:
      summary: Delete a book
      operationId: deleteAuthor
      parameters:
      - name: bookId
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "204":
          description: Book deleted
  /books/{bookId}/authors/{authorId}:
    put:
      summary: Associate an author with a book
      operationId: updateBookAuthor
      parameters:
      - name: bookId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: authorId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateBookAuthor'
        required: true
      responses:
        "200":
          description: Successfully associated the author with the book
        "404":
          description: Book or Author not found
        "400":
          description: "Invalid input (e.g., missing bookId or authorId in path)"
  /authors:
    get:
      summary: Get a list of authors
      operationId: getAllAuthors
      parameters:
      - name: authorName
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: A list of authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
    post:
      summary: Create a new author
      operationId: createAuthor
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Author'
        required: true
      responses:
        "201":
          description: Author created
components:
  schemas:
    CrupdateBook:
      type: object
      properties:
        id:
          type: string
        bookName:
          type: string
        pageNumbers:
          type: integer
        topic:
          type: string
          enum:
          - ROMANCE
          - COMEDY
          - OTHER
        releaseDate:
          type: string
          format: date
    Book:
      type: object
      properties:
        author:
          type: object
          description: Author is initially null for newly created books.
          nullable: true
      allOf:
      - $ref: '#/components/schemas/CrupdateBook'
    Author:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        sex:
          type: string
          enum:
          - M
          - F
    UpdateBookAuthor:
      type: object
      properties:
        bookId:
          type: string
        authorId:
          type: string
